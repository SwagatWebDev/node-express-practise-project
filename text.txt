@Override
public Page<EventLogDto> getEventLog(Pageable pageable) {
    Page<EventLogProjection> eventLogData = eventLogRepository.getEventLogData(pageable);

    List<EventLogDto> combinedEventLogDtoList = getCombinedEventLogDtoList(eventLogData.getContent());

    return new PageImpl<>(combinedEventLogDtoList, pageable, eventLogData.getTotalElements());
}

private List<EventLogDto> getCombinedEventLogDtoList(List<EventLogProjection> eventLogData) {
    Map<String, List<EventLogProjection>> groupedByNameAndPathAndDay = eventLogData.stream()
        .collect(Collectors.groupingBy(event ->
            event.getName() + event.getFullPathName() + event.getEventCreatedDate().substring(0, 10)));

    return groupedByNameAndPathAndDay.values().stream()
        .map(this::pickRecordWithMinOldValueAndMaxNewValue)
        .map(this::mapToEventLogDto)
        .collect(Collectors.toList());
}

private EventLogProjection pickRecordWithMinOldValueAndMaxNewValue(List<EventLogProjection> eventsWithSameNamePathAndDay) {
    return eventsWithSameNamePathAndDay.stream()
        .min(Comparator.comparing(EventLogProjection::getOldValue))
        .map(minOldValueEvent ->
            eventsWithSameNamePathAndDay.stream()
                .max(Comparator.comparing(EventLogProjection::getNewValue))
                .map(maxNewValueEvent -> {
                    maxNewValueEvent.setOldValue(minOldValueEvent.getOldValue());
                    return maxNewValueEvent;
                })
                .orElseThrow()
        )
        .orElseThrow(); // Handle as per your logic
}
