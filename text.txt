private EventLogProjection pickRecordWithMinOldValueAndMaxNewValue(List<EventLogProjection> eventsWithSameNamePathAndDay) {
    return eventsWithSameNamePathAndDay.stream()
            .min(Comparator.comparing(EventLogProjection::getOldValue, Comparator.nullsLast(String::compareTo)))
            .map(minOldValueEvent ->
                    eventsWithSameNamePathAndDay.stream()
                            .filter(event -> Objects.equals(event.getNewValue(), minOldValueEvent.getNewValue()))
                            .max(Comparator.comparing(EventLogProjection::getEventCreatedDate, Comparator.nullsLast(String::compareTo)))
                            .map(maxNewValueEvent -> {
                                EventLogProjection result = new EventLogProjection() {
                                    @Override
                                    public String getOldValue() {
                                        return minOldValueEvent.getOldValue();
                                    }

                                    @Override
                                    public String getNewValue() {
                                        return maxNewValueEvent.getNewValue();
                                    }

                                    // Implement other methods of EventLogProjection
                                };

                                return result;
                            })
                            .orElse(minOldValueEvent)
            )
            .orElseThrow(); // Handle as per your logic
}
