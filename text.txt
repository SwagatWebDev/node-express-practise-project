private EventLogProjection pickRecordWithMinOldValueAndMaxNewValue(List<EventLogProjection> eventsWithSameNamePathAndDay) {
    return eventsWithSameNamePathAndDay.stream()
            .min(Comparator.comparing(
                    EventLogProjection::getOldValue,
                    Comparator.nullsLast(Comparator.naturalOrder()))
                    .thenComparing(
                            EventLogProjection::getEventCreatedDate,
                            Comparator.nullsLast(Comparator.naturalOrder())))
            .map(minOldValueEvent ->
                    eventsWithSameNamePathAndDay.stream()
                            .filter(event -> Objects.equals(event.getOldValue(), minOldValueEvent.getOldValue()))
                            .max(Comparator.comparing(
                                    EventLogProjection::getEventCreatedDate,
                                    Comparator.nullsLast(Comparator.naturalOrder())))
                            .orElseThrow())
            .map(minOldAndMaxNewValueEvent -> {
                String oldValue = minOldAndMaxNewValueEvent.getOldValue();
                String newValue = eventsWithSameNamePathAndDay.stream()
                        .filter(event -> Objects.equals(event.getOldValue(), oldValue))
                        .max(Comparator.comparing(
                                EventLogProjection::getEventCreatedDate,
                                Comparator.nullsLast(Comparator.naturalOrder())))
                        .map(EventLogProjection::getNewValue)
                        .orElseThrow();
                return new EventLogProjectionImpl(oldValue, newValue); // Adjust this line accordingly
            })
            .orElseThrow(); // Handle as per your logic
}
