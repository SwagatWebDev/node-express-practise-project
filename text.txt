private EventLogProjection pickRecordWithMinOldValueAndMaxNewValue(List<EventLogProjection> eventsWithSameNamePathAndDay) {
    Optional<EventLogProjection> minOldValueEvent = eventsWithSameNamePathAndDay.stream()
            .min(Comparator.comparing(
                    EventLogProjection::getOldValue,
                    Comparator.nullsLast(Comparator.naturalOrder()))
                    .thenComparing(
                            EventLogProjection::getEventCreatedDate,
                            Comparator.nullsLast(Comparator.naturalOrder())));

    Optional<EventLogProjection> maxNewValueEvent = eventsWithSameNamePathAndDay.stream()
            .max(Comparator.comparing(
                    EventLogProjection::getNewValue,
                    Comparator.nullsLast(Comparator.naturalOrder()))
                    .thenComparing(
                            EventLogProjection::getEventCreatedDate,
                            Comparator.nullsLast(Comparator.naturalOrder())));

    if (minOldValueEvent.isPresent() && maxNewValueEvent.isPresent()) {
        EventLogProjection result = new EventLogProjection() {
            @Override
            public String getOldValue() {
                return minOldValueEvent.get().getOldValue();
            }

            @Override
            public String getNewValue() {
                return maxNewValueEvent.get().getNewValue();
            }

            // Implement other methods if necessary
        };

        return result;
    } else {
        throw new RuntimeException("No matching events found");
    }
}
